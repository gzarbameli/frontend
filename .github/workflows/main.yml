# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build , tag , and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-images-registry
          IMAGE_TAG: frontend
        run : |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
      - name: Set Certificate Permissions
        run: chmod 400 labsuser.pem
      
      - name: Installing Requirements
        run: sudo apt-get update -y && sudo apt-get install gawk -y

      # Runs a set of commands using the runners shell
      
      #sleep 60
      #kubectl get pods
      - name: Update Kubernetes Items 
        run: |
             ssh -oStrictHostKeyChecking=no -i labsuser.pem ubuntu@44.205.128.120 <<- 'EOF'
             pkill -f "port-forward --address=0.0.0.0 svc/frontend-service 30000:3000"
             kubectl get pod -n default --no-headers=true | awk '/frontend-deployment/{print $1}' | xargs  kubectl delete -n default pod
             echo $(kubectl get pods $(kubectl get pod -n default --no-headers=true | awk '/frontend-deployment/{print $1}') -o jsonpath="{.status.phase}")
             if [ $(kubectl get pods $(kubectl get pod -n default --no-headers=true | awk '/frontend-deployment/{print $1}') -o jsonpath="{.status.phase}")=="Running" ]; then echo "Cont"; fi
             while ! [ $(kubectl get pods $(kubectl get pod -n default --no-headers=true | awk '/frontend-deployment/{print $1}') -o jsonpath="{.status.phase}")=="Running" ]; do sleep 1; done
             kubectl port-forward --address=0.0.0.0 svc/frontend-service 30000:3000 > /dev/null 2>&1 &
             exit
             EOF
  
